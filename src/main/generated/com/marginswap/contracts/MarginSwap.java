package com.marginswap.contracts;

import org.web3j.abi.*;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.*;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.methods.request.Transaction;
import org.web3j.protocol.core.methods.request.Transaction;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.tx.Contract;
import java.io.IOException;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.utils.Numeric;
import java.util.stream.Collectors;

@javax.annotation.Generated(value="merklex-code-gen")
public class MarginSwap {
    public static final String BINARY = "608060405234801561001057600080fd5b50604051608080610c9d8339810180604052608081101561003057600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291905050508360005582600155816002558060035550505050610c1b806100826000396000f3fe6080604052600436106100555760003560e01c80632d891fba1461005a578063439370b1146100d557806347e7ef24146100df5780635ccbf1761461012d57806369328dec1461025c578063c2998238146102d7575b600080fd5b34801561006657600080fd5b506100d36004803603606081101561007d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061035d565b005b6100dd610377565b005b61012b600480360360408110156100f557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610384565b005b61025a600480360360c081101561014357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156101d457600080fd5b8201836020820111156101e657600080fd5b8035906020019184600183028401116401000000008311171561020857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061042d565b005b34801561026857600080fd5b506102d56004803603606081101561027f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610658565b005b3480156102e357600080fd5b5061035b600480360360208110156102fa57600080fd5b810190808035906020019064010000000081111561031757600080fd5b82018360208201111561032957600080fd5b8035906020019184602083028401116401000000008311171561034b57600080fd5b90919293919293905050506107d8565b005b6000543318156103725760016020526001603ffd5b505050565b610382600034610384565b565b61038c610b89565b610394610bab565b348318841516156103aa5760016020526001603ffd5b831561041d5734156103c15760026020526001603ffd5b7f23b872dd000000000000000000000000000000000000000000000000000000008252336004830152306024830152826044830152600081526020816064846000885af18151158115171561041b5760036020526001603ffd5b505b610427848461097a565b50505050565b610435610b89565b61043d610bab565b600080543318156104535760016020526001603ffd5b6001547fab9567040000000000000000000000000000000000000000000000000000000084528960048501528860248501526000806044866000855af1806104a05760026020526001603ffd5b5089156105085734156104b85760036020526001603ffd5b7fb759f9540000000000000000000000000000000000000000000000000000000084528860048501526000835260208360248660008a5af1835115811517156105065760046020526001603ffd5b505b7f70a0823100000000000000000000000000000000000000000000000000000000845287600485015260008352602083602486335afa8061054e5760056020526001603ffd5b508251600080875160208901348b5af18061056e5760066020526001603ffd5b507fb759f954000000000000000000000000000000000000000000000000000000008552600060048601526000845260208460248760008b5af1845115811517156105be5760076020526001603ffd5b507f70a0823100000000000000000000000000000000000000000000000000000000855288600486015260008452602084602487335afa806106055760086020526001603ffd5b5083518082101561061b5760096020526001603ffd5b81810393508884101561063357600a6020526001603ffd5b505050610640878261097a565b61064d8989600154610658565b505050505050505050565b610660610bcd565b610668610bab565b84600401548061067d5760c86020526001603ffd5b7f3af9e669000000000000000000000000000000000000000000000000000000008352336004840152602082602485845afa806106bf5760c96020526001603ffd5b50815180808710156106cf578690505b8015610732577f852a12e30000000000000000000000000000000000000000000000000000000085528060048601526020846024876000875af1806107195760ca6020526001603ffd5b84511561072b5760cb6020526001603ffd5b8188039750505b50508415610782577fc5ebeaec0000000000000000000000000000000000000000000000000000000083528460048401526020826024856000855af18251156107805760cc6020526001603ffd5b505b84156107d0577fc5ebeaec0000000000000000000000000000000000000000000000000000000083528460048401526020826024856000855af18251156107ce5760cc6020526001603ffd5b505b505050505050565b600435602018156107ee5760016020526001603ffd5b60243560423682602002604401181561080c5760026020526001603ffd5b6040513680600083376004810382828460006002545af1806108335760036020526001603ffd5b8251602018156108485760046020526001603ffd5b602083015185181561085f5760056020526001603ffd5b6000805b868110156108955760208102604086010151808317925082156108895780602052602080fd5b50600181019050610863565b5080156108a75760066020526001603ffd5b50505050600354602083028201825b81811015610971578035604051600081528482181561090d577f6f307dc3000000000000000000000000000000000000000000000000000000008152602081600483855afa8061090b5760076020526001603ffd5b505b80518281600401557fdaea85c500000000000000000000000000000000000000000000000000000000825282600483015260248201602081602485855afa815115811517156109615760086020526001603ffd5b50505050506020810190506108b6565b50505050505050565b610982610bcd565b61098a610bab565b83600401548061099f5760646020526001603ffd5b7f17bfdfbc000000000000000000000000000000000000000000000000000000008352336004840152602082602485845afa806109e15760656020526001603ffd5b50600354825180808710156109f4578690505b8015610ac4577f4e4d9fea00000000000000000000000000000000000000000000000000000000865260048184861815610a5a577f0e75270200000000000000000000000000000000000000000000000000000000885282600489015260249150600090505b602087838a848a5af180610a735760666020526001603ffd5b3d60008114610a8f5760208114610aa75760696020526001603ffd5b86881815610aa25760676020526001603ffd5b610aba565b885115610ab95760686020526001603ffd5b5b50838a0399505050505b50508415610b81577f1249c58b00000000000000000000000000000000000000000000000000000000845260048582841815610b2c577fa0712d6800000000000000000000000000000000000000000000000000000000865286600487015260249150600090505b602085838884885af13d60008114610b515760208114610b6957606c6020526001603ffd5b84861815610b6457606a6020526001603ffd5b610b7c565b865115610b7b57606b6020526001603ffd5b5b505050505b505050505050565b6040518060800160405280600490602082028038833980820191505090505090565b6040518060200160405280600190602082028038833980820191505090505090565b604051806040016040528060029060208202803883398082019150509050509056fea165627a7a723058205d9237120f1114703a0529ed08b2ae03e229bbca12cbb31a41dc529d8b0a35720029";
    public static Function transferOut(String asset, BigInteger amount, String destination) {
        return new Function(
            "transferOut",
            Arrays.asList(
                new org.web3j.abi.datatypes.Address(asset)
                , new UnsignedNumberType(256, amount)
                , new org.web3j.abi.datatypes.Address(destination)
            ),
            Collections.emptyList()
        );
    }
    public static Function transferOut(String asset, long amount, String destination) {
        return transferOut(
            asset
            , new BigInteger(Long.toUnsignedString(amount))
            , destination
        );
    }
    public static Function depositEth() {
        return new Function(
            "depositEth",
            Collections.emptyList(),
            Collections.emptyList()
        );
    }
    public static Function deposit(String asset_address, BigInteger amount) {
        return new Function(
            "deposit",
            Arrays.asList(
                new org.web3j.abi.datatypes.Address(asset_address)
                , new UnsignedNumberType(256, amount)
            ),
            Collections.emptyList()
        );
    }
    public static Function deposit(String asset_address, long amount) {
        return deposit(
            asset_address
            , new BigInteger(Long.toUnsignedString(amount))
        );
    }
    public static Function trade(String input_asset, BigInteger input_amount, String output_asset, BigInteger min_output_amount, String trade_contract, String trade_data) {
        return new Function(
            "trade",
            Arrays.asList(
                new org.web3j.abi.datatypes.Address(input_asset)
                , new UnsignedNumberType(256, input_amount)
                , new org.web3j.abi.datatypes.Address(output_asset)
                , new UnsignedNumberType(256, min_output_amount)
                , new org.web3j.abi.datatypes.Address(trade_contract)
                , new org.web3j.abi.datatypes.DynamicBytes(Numeric.hexStringToByteArray(trade_data))
            ),
            Collections.emptyList()
        );
    }
    public static Function trade(String input_asset, long input_amount, String output_asset, long min_output_amount, String trade_contract, String trade_data) {
        return trade(
            input_asset
            , new BigInteger(Long.toUnsignedString(input_amount))
            , output_asset
            , new BigInteger(Long.toUnsignedString(min_output_amount))
            , trade_contract
            , trade_data
        );
    }
    public static Function withdraw(String asset, BigInteger amount, String destination) {
        return new Function(
            "withdraw",
            Arrays.asList(
                new org.web3j.abi.datatypes.Address(asset)
                , new UnsignedNumberType(256, amount)
                , new org.web3j.abi.datatypes.Address(destination)
            ),
            Collections.emptyList()
        );
    }
    public static Function withdraw(String asset, long amount, String destination) {
        return withdraw(
            asset
            , new BigInteger(Long.toUnsignedString(amount))
            , destination
        );
    }
    public static Function enterMarkets(List<String> cTokens) {
        return new Function(
            "enterMarkets",
            Collections.singletonList(
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(org.web3j.abi.datatypes.Address.class, cTokens.stream().map(org.web3j.abi.datatypes.Address::new).collect(Collectors.toList()))
            ),
            Collections.emptyList()
        );
    }
    public static String DeployData(String owner, String parent_address, String comptroller_address, String cEther_address) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(
            Arrays.asList(
                new org.web3j.abi.datatypes.Address(owner)
                , new org.web3j.abi.datatypes.Address(parent_address)
                , new org.web3j.abi.datatypes.Address(comptroller_address)
                , new org.web3j.abi.datatypes.Address(cEther_address)
            )
        );
        return BINARY + encodedConstructor;
    }
}
